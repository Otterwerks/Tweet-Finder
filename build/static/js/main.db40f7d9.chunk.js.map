{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","view","searchString","searchType","contentType","searchResults","randomTweets","handleChange","bind","assertThisInitialized","searchTweets","event","setState","target","value","_this2","url","axios","get","then","response","processTweets","data","statuses","catch","error","console","log","tweets","processedTweets","map","tweet","container","user","screen_name","time","created_at","content","text","react_default","a","createElement","App_Search","onChange","App_AwesomeTweets","App_Home","_this3","className","onClick","currentView","Component","Home","Search","name","type","key","AwesomeTweets","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db40f7d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      view: \"Home\",\n      searchString: 'nasa',\n      searchType: 'content',\n      contentType: 'mixed',\n      searchResults: [],\n      randomTweets: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.searchTweets = this.searchTweets.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({searchString: event.target.value});\n  }\n\n  searchTweets() {\n    let resource = 'api/v1/methods/search?';\n    let parameter1 = 'searchString=' + this.state.searchString;\n    let parameter2 = '&searchType=' + this.state.searchType;\n    let parameter3 = '&contentType=' + this.state.contentType;\n    let url = resource + parameter1 + parameter2 + parameter3;\n    axios.get(url)\n      .then((response) => {\n        this.setState({searchResults: this.processTweets(response.data.statuses)});\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n    this.setState({searchString: ''});\n  }\n\n  randomTweets() {\n    //query recent tweets from predetermined users\n  }\n\n  processTweets(tweets) {\n    let processedTweets = tweets.map((tweet) => {\n      let container = {};\n        container.user = tweet.user.screen_name;\n        container.time = tweet.created_at;\n        container.content = tweet.text;\n        //console.log(container);\n      return container;\n    })\n    console.log(processedTweets);\n    return processedTweets;\n  }\n\n  currentView() {\n    if (this.state.view === \"Search\") {\n      return <Search onChange={this.handleChange} searchTweets={this.searchTweets} value={this.state.searchString} tweets={this.state.searchResults} />\n    } else if (this.state.view === \"AwesomeTweets\") {\n      return <AwesomeTweets tweets={this.state.randomTweets} />\n    } else {\n      return <Home />\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n        <div className=\"Header\">\n          <div className=\"Navbar\">\n            <button onClick={() => this.setState({view: \"Home\"})}>Home</button>\n            <button onClick={() => this.setState({view: \"Search\"})}>Search</button>\n            <button onClick={() => this.setState({view: \"AwesomeTweets\"})}>Awesome Tweets</button>\n          </div>\n        </div>\n        <div className=\"View\">\n          {this.currentView()}\n        </div>\n      </div>\n\n    )\n  }\n}\n\nclass Home extends Component {\n  render() {\n    return(\n      <div className=\"Home\">\n        <div className=\"Title\">\n          <h1>Home</h1>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Search extends Component {\n  render() {\n    return (\n      <div className=\"Search\">\n        <div className=\"Title\">\n          <h1>Search Tweets</h1>\n        </div>\n        <div className=\"Form\">\n          <input\n            name=\"search\"\n            type=\"text\"\n            value={this.props.value}\n            onChange={this.props.onChange}\n          />\n          <button onClick={this.props.searchTweets}>Find Tweets</button>\n        </div>\n        <div className=\"SearchResults\">\n          {this.props.tweets.map(tweet => {\n            return (\n              <div className=\"Tweet\" key={tweet.content}>\n                <h2>By {tweet.user}, on {tweet.time}</h2>\n                <h3>{tweet.content}</h3>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AwesomeTweets extends Component {\n  render() {\n    return (\n      <div className=\"AwesomeTweets\">\n        <div className=\"Title\">\n          <h1>Awesome Tweets</h1>\n        </div>\n        <div className=\"SearchResults\">\n          {this.props.tweets}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}