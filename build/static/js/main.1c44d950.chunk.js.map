{"version":3,"sources":["navbar.js","home.js","search.js","awesometweets.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","buttonList","navigationButtons","i","length","push","react_default","a","createElement","value","onClick","this","props","pageNav","className","generateNavigationButtons","buttons","Component","Home","Search","type","onChange","searchType","selectSearchType","contentType","selectContentType","searchTweets","listTweets","tweets","AwesomeTweets","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","view","searchString","searchResults","randomTweets","handleChange","bind","assertThisInitialized","setSearchType","setContentType","pageNavigation","formatTweets","event","setState","target","_this2","url","axios","get","then","response","data","statuses","catch","error","console","log","text","split","map","fragment","includes","href","reduce","words","word","concat","_this3","tweet","key","id","user","screen_name","created_at","applyLink","search","awesometweets","home","navbar","currentView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c44d950.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\n  generateNavigationButtons(buttonList) {\n    let navigationButtons = []\n    for (let i = 0; i < buttonList.length; i++) {\n      navigationButtons.push(<button value={buttonList[i]} onClick={this.props.pageNav}>{buttonList[i]}</button>);\n    }\n    return <div className=\"Navbar\">{navigationButtons}</div>\n  }\n\n  render() {\n    return (\n      <div className=\"Banner\">\n        <div className=\"Header\">\n          <div className=\"Navbar\">\n            {this.generateNavigationButtons(this.props.buttons)}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\nclass Home extends Component {\n    render() {\n      return(\n        <div className=\"Home\">\n          <div className=\"Title\">\n            <h1>Home</h1>\n          </div>\n        </div>\n      )\n    }\n  }\n\nexport default Home;","import React, { Component } from 'react';\n\nclass Search extends Component {\n    render() {\n      return (\n        <div className=\"Search\">\n          <div className=\"Title\">\n            <h1>Search Tweets</h1>\n          </div>\n          <div className=\"Form\">\n            <input type=\"text\" value={this.props.value} onChange={this.props.onChange}/>\n            <select value={this.props.searchType} onChange={this.props.selectSearchType}>\n              <option value=\"standard\">Standard</option>\n              <option value=\"user\">Username</option>\n            </select>\n            <select value={this.props.contentType} onChange={this.props.selectContentType}>\n              <option value=\"mixed\">Standard</option>\n              <option value=\"popular\">Popular</option>\n              <option value=\"recent\">Recent</option>\n            </select>\n            <button onClick={this.props.searchTweets}>Find Tweets</button>\n          </div>\n          <div className=\"SearchResults\">\n            {this.props.listTweets(this.props.tweets)}\n          </div>\n        </div>\n      )\n    }\n  }\n\nexport default Search;\n","import React, { Component } from 'react';\n\nclass AwesomeTweets extends Component {\n    render() {\n      return (\n        <div className=\"AwesomeTweets\">\n          <div className=\"Title\">\n            <h1>Awesome Tweets</h1>\n          </div>\n          <div className=\"SearchResults\">\n            {this.props.tweets}\n          </div>\n        </div>\n      )\n    }\n  }\n\nexport default AwesomeTweets;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './navbar.js';\nimport Home from './home.js';\nimport Search from './search.js';\nimport AwesomeTweets from './awesometweets.js';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      view: \"Home\",\n      searchString: 'nasa',\n      searchType: 'content',\n      contentType: 'mixed',\n      searchResults: [],\n      randomTweets: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.setSearchType = this.setSearchType.bind(this);\n    this.setContentType = this.setContentType.bind(this);\n    this.searchTweets = this.searchTweets.bind(this);\n    this.pageNavigation = this.pageNavigation.bind(this);\n    this.formatTweets = this.formatTweets.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({searchString: event.target.value});\n  }\n\n  setSearchType(event) {\n    this.setState({searchType: event.target.value});\n  }\n\n  setContentType(event) {\n    this.setState({contentType: event.target.value});\n  }\n\n  pageNavigation(event) {\n    this.setState({view: event.target.value})\n  }\n\n  searchTweets() {\n    this.setState({searchResults: []});\n    let resource = 'api/v1/methods/search?';\n    let parameter1 = 'searchString=' + this.state.searchString;\n    let parameter2 = '&searchType=' + this.state.searchType;\n    let parameter3 = '&contentType=' + this.state.contentType;\n    let url = resource + parameter1 + parameter2 + parameter3;\n    axios.get(url)\n      .then((response) => {\n        this.setState({searchResults: response.data.statuses});\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n    this.setState({searchString: ''});\n  }\n\n  randomTweets() {\n    //query recent tweets from predetermined users\n  }\n\n  applyLink(text) {\n    let fragments = text.split(' ').map(fragment => {\n      if (fragment.includes(\"http://\") || fragment.includes(\"https://\")) {\n        return <a href={fragment}>{fragment}</a>;\n      } else {\n        return fragment;\n      }\n    });\n    return fragments.reduce((words, word) => words.concat(word, ' '), [0]);\n  }\n  \n  formatTweets(tweets) {\n    return (tweets.map(tweet => {\n      return (\n        <div className=\"Tweet\" key={tweet.id}>\n          <h2>By {tweet.user.screen_name}, on {tweet.created_at}</h2>\n          <h3>{this.applyLink(tweet.text)}</h3>\n        </div>\n      )\n    }))\n  }\n\n  currentView() {\n    if (this.state.view === \"Search\") {\n      return (<Search \n                onChange={this.handleChange}\n                selectSearchType={this.setSearchType}\n                selectContentType={this.setContentType}\n                searchTweets={this.searchTweets}\n                searchType={this.state.searchType}\n                contentType={this.state.contentType}\n                value={this.state.searchString} \n                tweets={this.state.searchResults}\n                listTweets={this.formatTweets}\n              />)\n    } else if (this.state.view === \"Awesome Tweets\") {\n      return <AwesomeTweets tweets={this.state.randomTweets} />\n    } else {\n      return <Home />\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n        <Navbar pageNav={this.pageNavigation} buttons={[\"Home\", \"Search\", \"Awesome Tweets\"]}/>\n        {this.currentView()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}